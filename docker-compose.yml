# docker-compose.yml
services:
  db:
    image: postgres:13
    env_file: .env
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - library-network
    ports:
      - "5444:5432"

  backend:
    build: ./backend
    command: bash -c "./wait-for-db.sh && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles  # Постоянное хранилище для статики
    env_file: .env
    ports:
      - "8000:8000"
    depends_on:
      - db
    networks:
      - library-network


  frontend:
      build:
        context: ./frontend
        target: dev # Указываем стадию сборки для разработки
      volumes:
        - ./frontend:/app
        - /app/node_modules # Важно! Избегаем конфликтов с node_modules на хосте
      ports:
        - "3000:3000" # Пробрасываем порт dev-сервера
      environment:
        - NODE_ENV=development
        - CHOKIDAR_USEPOLLING=true # Для работы hot-reload в Docker
        - WATCHPACK_POLLING=true # Дополнительная опция для файлового вотчера
      networks:
        - library-network
      command: npm start # Запускаем dev-сервер

volumes:
  postgres_data:
  static_volume:

networks:
  library-network:
    driver: bridge